// Interface Notificacao
public interface Notificacao {
    void enviar(String mensagem);
}

// Classe concreta NotificacaoEmail
public class NotificacaoEmail implements Notificacao {
    @Override
    public void enviar(String mensagem) {
        System.out.println("Enviando Email: " + mensagem);
    }
}

// Classe concreta NotificacaoSMS
public class NotificacaoSMS implements Notificacao {
    @Override
    public void enviar(String mensagem) {
        System.out.println("Enviando SMS: " + mensagem);
    }
}

// Classe NotificacaoFactory que usa Factory Method
public class NotificacaoFactory {

    // Factory Method para criar uma instância de Notificacao
    public static Notificacao criarNotificacao(String tipo) {
        if (tipo.equalsIgnoreCase("email")) {
            return new NotificacaoEmail();
        } else if (tipo.equalsIgnoreCase("sms")) {
            return new NotificacaoSMS();
        } else {
            throw new IllegalArgumentException("Tipo de notificação desconhecido");
        }
    }
}
public class Main {
    public static void main(String[] args) {
        // Solicita o tipo de notificação desejado
        Notificacao notificacaoEmail = NotificacaoFactory.criarNotificacao("email");
        notificacaoEmail.enviar("Sua compra foi confirmada!");

//algoritmo em forma estrutual

// Interface Pagamento
public interface Pagamento {
    void processarPagamento(double valor);
}
        Notificacao notificacaoSMS = NotificacaoFactory.criarNotificacao("sms");
        notificacaoSMS.enviar("Seu código de autenticação é 1234.");
    }
}
// API de pagamento existente com interface incompatível
public class PagamentoExistente {
    public void realizarPagamento(double quantia) {
        System.out.println("Pagamento de " + quantia + " realizado com a API de pagamento existente.");
    }
}
// Adapter que adapta PagamentoExistente para a interface Pagamento
public class PagamentoAdapter implements Pagamento {
    private PagamentoExistente pagamentoExistente;

    public PagamentoAdapter(PagamentoExistente pagamentoExistente) {
        this.pagamentoExistente = pagamentoExistente;
    }

    @Override
    public void processarPagamento(double valor) {
        // Adaptando a chamada de método
        pagamentoExistente.realizarPagamento(valor);
    }
}
// Classe Loja que usa a interface Pagamento para processar pagamentos
public class Loja {
    private Pagamento pagamento;

    public Loja(Pagamento pagamento) {
        this.pagamento = pagamento;
    }

    public void realizarCompra(double valor) {
        System.out.println("Processando compra no valor de " + valor);
        pagamento.processarPagamento(valor);
    }
}
public class Main {
    public static void main(String[] args) {
        // Criando uma instância da API de pagamento existente
        PagamentoExistente pagamentoExistente = new PagamentoExistente();

        // Usando o adapter para adaptar a API de pagamento existente para a interface Pagamento
        Pagamento pagamentoAdapter = new PagamentoAdapter(pagamentoExistente);

        // Criando a loja com o pagamento adaptado
        Loja loja = new Loja(pagamentoAdapter);

        // Realizando uma compra
        loja.realizarCompra(150.00);
    }
}

//algoritmo em categoria comportamental strategy 

// Interface OrdenacaoStrategy
public interface OrdenacaoStrategy {
    void ordenar(int[] array);
}

// Classe BubbleSort que implementa OrdenacaoStrategy
public class BubbleSort implements OrdenacaoStrategy {
    @Override
    public void ordenar(int[] array) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    // Troca de elementos
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
        System.out.println("Array ordenado usando Bubble Sort.");
    }
}

// Classe MergeSort que implementa OrdenacaoStrategy
public class MergeSort implements OrdenacaoStrategy {
    @Override
    public void ordenar(int[] array) {
        mergeSort(array, 0, array.length - 1);
        System.out.println("Array ordenado usando Merge Sort.");
    }

    private void mergeSort(int[] array, int esquerda, int direita) {
        if (esquerda < direita) {
            int meio = (esquerda + direita) / 2;
            mergeSort(array, esquerda, meio);
            mergeSort(array, meio + 1, direita);
            merge(array, esquerda, meio, direita);
        }
    }

    private void merge(int[] array, int esquerda, int meio, int direita) {
        int n1 = meio - esquerda + 1;
        int n2 = direita - meio;

        int[] esquerdaArray = new int[n1];
        int[] direitaArray = new int[n2];

        System.arraycopy(array, esquerda, esquerdaArray, 0, n1);
        System.arraycopy(array, meio + 1, direitaArray, 0, n2);

        int i = 0, j = 0, k = esquerda;
        while (i < n1 && j < n2) {
            if (esquerdaArray[i] <= direitaArray[j]) {
                array[k] = esquerdaArray[i];
                i++;
            } else {
                array[k] = direitaArray[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            array[k] = esquerdaArray[i];
            i++;
            k++;
        }

        while (j < n2) {
            array[k] = direitaArray[j];
            j++;
            k++;
        }
    }
}
// Classe ContextoOrdenacao que usa OrdenacaoStrategy
public class ContextoOrdenacao {
    private OrdenacaoStrategy strategy;

    public void setStrategy(OrdenacaoStrategy strategy) {
        this.strategy = strategy;
    }

    public void ordenarArray(int[] array) {
        if (strategy == null) {
            System.out.println("Nenhuma estratégia de ordenação foi definida.");
        } else {
            strategy.ordenar(array);
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        ContextoOrdenacao contexto = new ContextoOrdenacao();
        Scanner scanner = new Scanner(System.in);

        int[] array = {64, 34, 25, 12, 22, 11, 90};
        System.out.println("Array original: " + Arrays.toString(array));

        System.out.println("Escolha o algoritmo de ordenação:");
        System.out.println("1 - Bubble Sort");
        System.out.println("2 - Merge Sort");
        int escolha = scanner.nextInt();

        if (escolha == 1) {
            contexto.setStrategy(new BubbleSort());
        } else if (escolha == 2) {
            contexto.setStrategy(new MergeSort());
        } else {
            System.out.println("Opção inválida.");
            return;
        }

        contexto.ordenarArray(array);
        System.out.println("Array ordenado: " + Arrays.toString(array));

        scanner.close();
    }
}

